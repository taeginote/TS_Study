{
	/**
	 * 함수의 오버로딩이란?
	 * 함수를 매개변수의 개수나 타입에 따라
	 * 여러가지 버전으로 정의하는 방법
	 *
	 * 즉, 쉽게 말해 하나의 함수인데 여러가지 버전으로 만드는 문법이다.
	 * -> 하나의 함수 func
	 * -> 모든 매개변수 타입은 number
	 * -> ver1. 매개변수 1개면 20 곱하고
	 * -> ver2. 매개변수 3개면 다 더한다
	 *
	 */

	//버전들
	//아래와 같이 구현부없이 선언식만 써준것을 -> 오버로드 시그니처 라고 부른다
	//함수를 오버로딩 하기 위해 각각 매개변수별로 다른 기능을 위해 아래와 같이 정의하낟
	function func(a: number): void
	function func(a: number, b: number, c: number): void

	//실제 구현부 => 구현 시그니처라고도 부른다.
	function func(a: number, b?: number, c?: number) {
		if (typeof b === 'number' && typeof c === 'number') {
			//ver2
			console.log(a + b + c)
		} else {
			//ver1
			console.log(a * 20)
		}
	}

	//위에 오버로드 시그니처를 만들었기 때문에 저 함수를 호출할때 인수들의 타입이 실제 구현부에 적용한 매개변수에 따르는것이 아닌,
	//오버로드 시그니처의 버전과 비교하기 때문에 지금 매개변수 1개와 3개가 정상적으로 작동하는 모습을 보인다.
	//그래서 호출할때는 타입 영향을 미치지 않는다.

	func() //오류
	func(1)
	func(1, 2) //오류
	func(1, 2, 3)
}
